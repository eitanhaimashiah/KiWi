#include "Generator.h"
#include <string>

//JAVA TO C++ CONVERTER NOTE: Forward class declarations:
namespace util { template<typename Ltypename R>class Pair; }

/// <summary>
/// Copyright (c) 2010 Yahoo! Inc. All rights reserved.                                                                                                                             
/// 
/// Licensed under the Apache License, Version 2.0 (the "License"); you                                                                                                             
/// may not use this file except in compliance with the License. You                                                                                                                
/// may obtain a copy of the License at                                                                                                                                             
/// 
/// http://www.apache.org/licenses/LICENSE-2.0                                                                                                                                      
/// 
/// Unless required by applicable law or agreed to in writing, software                                                                                                             
/// distributed under the License is distributed on an "AS IS" BASIS,                                                                                                               
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or                                                                                                                 
/// implied. See the License for the specific language governing                                                                                                                    
/// permissions and limitations under the License. See accompanying                                                                                                                 
/// LICENSE file.                                                                                                                                                                   
/// </summary>

namespace util
{

	/// <summary>
	/// A generator that is capable of generating ints as well as strings
	/// 
	/// @author cooperb
	/// 
	/// </summary>
	class IntegerGenerator : public Generator
	{
	public:
		int lastint = 0;

		/// <summary>
		/// Set the last value generated. IntegerGenerator subclasses must use this call
		/// to properly set the last string value, or the lastString() and lastInt() calls won't work.
		/// </summary>
	protected:
		virtual void setLastInt(int last);

		/// <summary>
		/// Return the next value as an int. When overriding this method, be sure to call setLastString() properly, or the lastString() call won't work.
		/// </summary>
	public:
		virtual int nextInt() = 0;

		virtual Pair<Integer, Integer> *nextInterval() = 0;

		/// <summary>
		/// Generate the next string in the distribution.
		/// </summary>
		std::wstring nextString() override;

		/// <summary>
		/// Return the previous string generated by the distribution; e.g., returned from the last nextString() call.
		/// Calling lastString() should not advance the distribution or have any side effects. If nextString() has not yet
		/// been called, lastString() should return something reasonable.
		/// </summary>
		std::wstring lastString() override;

		/// <summary>
		/// Return the previous int generated by the distribution. This call is unique to IntegerGenerator subclasses, and assumes
		/// IntegerGenerator subclasses always return ints for nextInt() (e.g. not arbitrary strings).
		/// </summary>
		virtual int lastInt();
		/// <summary>
		/// Return the expected value (mean) of the values this generator will return.
		/// </summary>
		virtual double mean() = 0;
	};

}
